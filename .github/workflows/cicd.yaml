name: CI/CD

on:
  workflow_dispatch:
    inputs:
      env-choice:
        type: choice
        description: Select the Environment
        options:
        - dev
        - stage
        - prod
      helm-choice:
        type: choice
        description: Select the Helm action
        options:
        - install
        - upgrade
        - uninstall

env:
  app_working_dir: 'app/'
  acr_name: 'acr${{ inputs.env-choice }}sample2024'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-choice }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        working-directory: ${{ env.app_working_dir }}
        run: poetry install

      - name: Install Helm
        uses: azure/setup-helm@v4.1.0
        id: install_helm

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build Docker image
        working-directory: ${{ env.app_working_dir }}
        run: |
          docker build . -t app:latest
          docker tag app:latest ${{ env.acr_name }}.azurecr.io/app:latest
          az acr login --name ${{ env.acr_name }}
          docker push ${{ env.acr_name }}.azurecr.io/app:latest

      - uses: azure/setup-kubectl@v3
        id: install_kubectl

      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: ${{ inputs.env-choice }}-aks-cluster

      # - name: Helm Install
      #   if: inputs.helm-choice == 'install'
      #   working-directory: ${{ env.app_working_dir }}/helm
      #   run: helm install --generate-name --kube-context ${{ inputs.env-choice }}-aks-cluster .

      # - name: Helm Upgrade
      #   if: inputs.helm-choice == 'upgrade'
      #   working-directory: ${{ env.app_working_dir }}/helm
      #   run: helm upgrade --generate-name --kube-context ${{ inputs.env-choice }}-aks-cluster .

      # - name: Helm Install
      #   if: inputs.helm-choice == 'install'
      #   working-directory: ${{ env.app_working_dir }}/helm
      #   run: |
      #     helm install --generate-name --kube-context ${{ inputs.env-choice }}-aks-cluster \
      #       --set mongodb.connectionString=$(kubectl get secret -n python-apps mongodb-connection-secret -o jsonpath="{.data.mongodb-connection-string}" | base64 -d) .

      # - name: Helm Upgrade
      #   if: inputs.helm-choice == 'upgrade'
      #   working-directory: ${{ env.app_working_dir }}/helm
      #   run: |
      #     helm upgrade app --kube-context ${{ inputs.env-choice }}-aks-cluster \
      #       --set mongodb.connectionString=$(kubectl get secret -n python-apps mongodb-connection-secret -o jsonpath="{.data.mongodb-connection-string}" | base64 -d) .

      - name: Helm Install app
        if: inputs.helm-choice == 'install'
        working-directory: ${{ env.app_working_dir }}/helm
        run: |
          sed -i 's|connection_string: ""|connection_string: "${{ secrets.MONGODB_CONNECTION_STRING }}"|' values-${{ inputs.env-choice }}.yaml
          helm install app --kube-context ${{ inputs.env-choice }}-aks-cluster \
            --set mongodb.connectionString=${{ secrets.MONGODB_CONNECTION_STRING }} -f values-${{ inputs.env-choice }}.yaml .

      - name: Helm Upgrade app
        if: inputs.helm-choice == 'upgrade'
        working-directory: ${{ env.app_working_dir }}/helm
        run: |
          sed -i 's|connection_string: ""|connection_string: "${{ secrets.MONGODB_CONNECTION_STRING }}"|' values-${{ inputs.env-choice }}.yaml
          helm upgrade app --kube-context ${{ inputs.env-choice }}-aks-cluster \
            --set mongodb.connectionString=${{ secrets.MONGODB_CONNECTION_STRING }} -f values-${{ inputs.env-choice }}.yaml .

      - name: Helm Uninstall app
        if: inputs.helm-choice == 'uninstall'
        working-directory: ${{ env.app_working_dir }}/helm
        run: |
          helm uninstall app --kube-context ${{ inputs.env-choice }}-aks-cluster

